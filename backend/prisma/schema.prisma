// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  roles         UserRole[]
  refreshTokens RefreshToken[]
  githubRepositories GitHubRepository[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model GitHubRepository {
  id                String    @id @default(uuid())
  githubPath        String    @unique
  repositoryUrl     String
  name              String
  description       String?
  owner             String
  stars             Int       @default(0)
  forks             Int       @default(0)
  openIssues        Int       @default(0)
  syncStatus        String    @default("pending") // pending, in_progress, completed, failed
  lastSyncAt        DateTime?
  syncError         String?
  addedByUserId     String
  createdAtGitHub   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  addedByUser       User      @relation(fields: [addedByUserId], references: [id], onDelete: Cascade)

  @@map("github_repositories")
}
